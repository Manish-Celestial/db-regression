Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    * Database error when using zero sized CLOB file
    *
    * INSERT, UPDATE, FETCH and DELETE are executed.
    *
    * Inserts records where #BIFNC256A and #BIFCLOBA are set to:
    * *SQLNULL
    * *NULL
    * Zero sized file
    * Non-Zero sized file
    *
    * Uses a Logical View to order the data based on #wLKData and a sequential value.
    * It then compares the data values of #BIFP0300A, #BIFNC256A and #BIFCLOBA, and the correct count of
    * records of each type are returned.
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Test_Records) Reffld(#Std_Count)
    Define Field(#LF_Sqlnull_Count) Reffld(#Std_Count)
    Define Field(#LF_Null_Count) Reffld(#Std_Count)
    Define Field(#LF_Zero_Size_Blob_Count) Reffld(#Std_Count)
    Define Field(#LF_Zero_Size_File) Reffld(#BIFC256A)
    Define Field(#LF_BIFP0300A) Reffld(#BIFP0300A)
    Define Field(#LF_BIFNC256A) Reffld(#BIFNC256A)
    Define Field(#LF_BIFCLOBA) Reffld(#BIFCLOBA)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    
    Define Field(#LF_Blob_Count) Reffld(#Std_Count)
    Def_List Name(#w_lBlob) Fields(#BIFC010A #BIFP0300A #BIFNC256A #BIFCLOBA) Counter(#LF_Blob_Count) Type(*WORKING)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    #LF_Test_Records := 20
    If (#LF_Test_Records < 12)
    #LF_Test_Records := 12
    Endif
    
    #Com_Owner.mthClearData( #VTF_KEY1 #LF_rc )
    If (#LF_rc = OK)
    #Com_Owner.mthCreate_Zero_Size_File( #LF_Zero_Size_File #LF_rc )
    If (#LF_rc = OK)
    #Com_Owner.mthInsert( #VTF_KEY1 #LF_Test_Records #LF_Zero_Size_File #LF_rc )
    
    If (#LF_rc = OK)
    #Com_Owner.mthSelect( #VTF_KEY1 #LF_rc )
    Endif
    
    If (#LF_rc = OK)
    #Com_Owner.mthUpdate( #VTF_KEY1 #LF_rc )
    Endif
    
    If (#LF_rc = OK)
    #Com_Owner.mthFetch( #VTF_KEY1 #LF_rc )
    Endif
    
    #Com_Owner.mthDelete_Zero_Size_File( #LF_Zero_Size_File #LF_rc )
    Endif
    Endif
    
    #Com_Owner.mthAdd_Msg( OK *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthClearData)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lBlob)
    
    Select Fields(#BIFC010A #BIFP0300A #BIFNC256A) From_File(VTL160553D) With_Key(#this_key) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lBlob)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Blob_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Blob_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Blob_Count)
    Get_Entry Number(#LF_i) From_List(#w_lBlob)
    
    Delete From_File(VTL160553D) With_Key(#BIFC010A #BIFP0300A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #LF_i.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*INPUT) Class(#Std_Count) Name(#this_records)
    Define_Map For(*INPUT) Class(#BIFC256A) Name(#this_zero_size_file)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #this_records.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lBlob)
    #LF_Sqlnull_Count := 0
    #LF_Null_Count := 0
    #LF_Zero_Size_Blob_Count := 0
    
    #BIFC010A := #this_key
    Begin_Loop Using(#BIFP0300A) To(#this_records)
    If ((#BIFP0300A = 3) *Or (#BIFP0300A = 8) *Or (#BIFP0300A = 19))
    #LF_Sqlnull_Count += 1
    #BIFNC256A := '*Sqlnull'
    #BIFCLOBA := *Sqlnull
    Else
    If ((#BIFP0300A = 4) *Or (#BIFP0300A = 13))
    #LF_Null_Count += 1
    #BIFNC256A := '*Null'
    #BIFCLOBA := *Null
    Else
    If ((#BIFP0300A = 6) *Or (#BIFP0300A = 11) *Or (#BIFP0300A = 17))
    #LF_Zero_Size_Blob_Count += 1
    #BIFNC256A := #this_zero_size_file
    #BIFCLOBA := #this_zero_size_file
    Else
    #BIFCLOBA := *Sys_Dir_Source + 'u_bifnnn.c'
    #BIFNC256A := #BIFCLOBA
    Endif
    Endif
    Endif
    
    Insert Fields(#BIFC010A #BIFP0300A #BIFNC256A #BIFCLOBA) To_File(VTL160553D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    Add_Entry To_List(#w_lBlob)
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #BIFP0300A.AsString + ', ' + #BIFNC256A.AsNativeString) )
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthCreate_Zero_Size_File)
    Define_Map For(*OUTPUT) Class(#BIFC256A) Name(#this_file)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #this_file := *Temp_Dir + '160553_EmptyBlob.txt'
    
    #Com_Owner.mthAdd_SubMsg( OK 'Create Zero Size File' (*Quote + #this_file + *Quote) )
    
    Use Builtin(OV_File_Service) With_Args(REMOVE_FILE #this_file)
    Use Builtin(Stm_File_Open) With_Args(#this_file 'Write Text') To_Get(#BIFP0300A #this_rc)
    If (#this_rc = OK)
    Use Builtin(Stm_File_Close) With_Args(#BIFP0300A) To_Get(#this_rc)
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK '- Successful' ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Stm_File_Close') )
    #this_rc := ER
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Stm_File_Open') )
    #this_rc := ER
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthDelete_Zero_Size_File)
    Define_Map For(*INPUT) Class(#BIFC256A) Name(#this_file)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Delete Zero Size File' (*Quote + #this_file + *Quote) )
    
    Use Builtin(OV_File_Service) With_Args(REMOVE_FILE #this_file) To_Get(#this_rc)
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK '- Successful' ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('OV_File_Service / Remove_File') )
    #this_rc := ER
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthSelect)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Select and Data Validation') '' )
    
    Select Fields(*ALL) From_File(L160553D1) With_Key(#this_key) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_BIFP0300A := #BIFP0300A
    #LF_BIFNC256A := #BIFNC256A
    #LF_BIFCLOBA := #BIFCLOBA
    
    Get_Entry Number(#BIFP0300A) From_List(#w_lBlob) Ret_Status(#this_rc)
    If (#this_rc = OK)
    If ((#LF_BIFNC256A <> #BIFNC256A) *Or (#LF_BIFP0300A <> #BIFP0300A) *Or *Not (#com_owner.mthFileCompare( #LF_BIFCLOBA #BIFCLOBA #this_rc )))
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected Differences') ('') )
    #Com_Owner.mthAdd_SubMsg( ER (' + Database #BIFNC256A') (*Quote + #LF_BIFNC256A.AsNativeString + *Quote) )
    #Com_Owner.mthAdd_SubMsg( ER (' + List Data #BIFNC256A') (*Quote + #BIFNC256A.AsNativeString + *Quote) )
    #Com_Owner.mthAdd_SubMsg( ER (' + Database #BIFP0300A') (*Quote + #LF_BIFP0300A.AsString + *Quote) )
    #Com_Owner.mthAdd_SubMsg( ER (' + List Data #BIFP0300A') (*Quote + #BIFP0300A.AsString + *Quote) )
    #Com_Owner.mthAdd_SubMsg( ER (' + Database #BIFCLOBA') (*Quote + #LF_BIFCLOBA.FileName + *Quote) )
    #Com_Owner.mthAdd_SubMsg( ER (' + List Data #BIFCLOBA') (*Quote + #BIFCLOBA.FileName + *Quote) )
    Leave
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Get_Entry') )
    #this_rc := ER
    Leave
    Endif
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK '- Successful' ('') )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFetch)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Fetch') '' )
    
    Begin_Loop Using(#LF_i) To(#LF_Blob_Count)
    Get_Entry Number(#LF_i) From_List(#w_lBlob) Ret_Status(#this_rc)
    
    If (#this_rc = OK)
    Fetch Fields(*ALL) From_File(VTL160553D) With_Key(#BIFC010A #BIFP0300A #BIFNC256A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Fetch on record ' + #LF_i.AsString) )
    #this_rc := ER
    Leave
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Get_Entry on record ' + #LF_i.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK '- Successful' ('') )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthUpdate)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update') '' )
    
    Begin_Loop Using(#LF_i) To(#LF_Blob_Count)
    Get_Entry Number(#LF_i) From_List(#w_lBlob) Ret_Status(#this_rc)
    
    If (#this_rc = OK)
    Case Of_Field(#BIFNC256A)
    When Value_Is(= '*Sqlnull')
    #BIFCLOBA := *Sqlnull
    When Value_Is(= '*Null')
    #BIFCLOBA := *Null
    Otherwise
    #BIFCLOBA := #BIFNC256A.AsNativeString
    Endcase
    
    Update Fields(*ALL) In_File(VTL160553D) With_Key(#BIFC010A #BIFP0300A #BIFNC256A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Update on record ' + #LF_i.AsString) )
    #this_rc := ER
    Leave
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Get_Entry on record ' + #LF_i.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    #Com_Owner.mthSelect( #this_key #this_rc )
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK '- Update Successful' ('') )
    Endif
    Endroutine
    
    *
    * mthFileCompare
    * Though the parameter names refer to BLOB, it compares files of any type.
    * It also deals with *SQLNULL database specific behaviour.
    * Note that an Alpha buffer is used because it is not NUL sensitive. This means it will successfully read all binary data.
    * But trailing blanks in the last read will exist unless the file is an exact multiple of the buffer size (256)
    * The comparison still succeeds because trailing blanks are ignored in Alpha comparisons.
    * If only the stream file BIFs supported Binary fields for the buffers!
    *
    Mthroutine Name(mthFileCompare)
    Define_Map For(*INPUT) Class(#BIFS512A) Name(#this_db_BLOB)
    Define_Map For(*INPUT) Class(#BIFS512A) Name(#this_list_BLOB)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001E) Name(#this_result) Desc('Boolean result')
    
    Define Field(#LF_DB_Fileno) Reffld(#BIFP0300A)
    Define Field(#LF_List_Fileno) Reffld(#BIFP0300A)
    Define Field(#LF_Test_Fileno) Reffld(#BIFP0300A)
    Define Field(#LF_DB_rc) Reffld(#BIFA002A)
    Define Field(#LF_List_rc) Reffld(#BIFA002A)
    Define Field(#LF_Test_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Buf) Reffld(#BIFA256A)
    Define Field(#LF_List_Buf) Reffld(#BIFA256A)
    
    * For the first call only, save a copy of the file. Used to check that all the data is being read correctly.
    * Must be manually compared to the original file using kdiff or some other comparison tool
    Define Field(#LF_Call_Count) Reffld(#STD_COUNT) Default(0)
    
    #LF_Call_count += 1
    
    #this_result := True
    
    * All database types tested - ODBCORACLE, MSSQLS and SQLANYWHERE - treat *NULL and zero length file as *SQLNULL.
    * This is very suspicious and so a CCS has been reproted to be investigated in more detail. Has LANSA
    * performed this transformation is it actually all databases? CCS 163976 reports this behaviour.
    * The false condition of this if statement is what the expected behaviour is.
    If (True = True)
    If ((#this_db_BLOB.IsSqlNull) *OrIf (#this_list_BLOB.IsSqlNull) *OrIf (#this_db_BLOB.IsNull) *OrIf (#this_list_BLOB.IsNull))
    
    If (#this_db_BLOB.IsSqlNull)
    If ((#this_list_BLOB.IsSqlNull) *OrIf (#this_list_BLOB.IsNull))
    #this_result := True
    Else
    * BLOB is neither *SQLNULL nor *NULL, so it should be a valid file.
    * Now must check for 0 length file
    Use Builtin(Stm_File_Open) With_Args(#this_list_BLOB 'Read Binary Lineterminator=NONE') To_Get(#LF_List_Fileno #LF_list_rc)
    If (#LF_list_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_list_rc) ('Opening ' + #this_list_BLOB.asValue( '*SQLNULL' )) )
    #this_rc := ER
    #this_result := False
    Return
    Endif
    
    Use Builtin(Stm_File_Read) With_Args(#LF_List_Fileno) To_Get(#LF_List_Buf #LF_list_rc)
    If (#LF_list_rc = ER)
    #Com_Owner.mthAdd_SubMsg( ER ('- Reading ' + #this_list_BLOB) ('') )
    #this_rc := ER
    #this_result := False
    * Must continue on to attempt to close the file
    Endif
    
    If ((#LF_list_rc = EF) *AndIf (#LF_list_Buf.CurSize = 0))
    * Treat as if its a *NULL file
    #this_result := True
    Else
    #this_result := False
    Endif
    
    Use Builtin(Stm_File_Close) With_Args(#LF_List_Fileno) To_Get(#LF_list_rc)
    If (#LF_list_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_list_rc) ('Closing ' + #this_list_BLOB) )
    #this_rc := ER
    #this_result := False
    Return
    Endif
    
    Endif
    Else
    If ((#this_db_BLOB.IsNull) *AndIf (#this_list_BLOB.IsNull))
    #this_result := True
    Else
    #this_result := False
    Endif
    Endif
    
    Return
    Endif
    Else
    If ((#this_db_BLOB.IsSqlNull) *OrIf (#this_list_BLOB.IsSqlNull))
    If ((#this_db_BLOB.IsSqlNull) *AndIf (#this_list_BLOB.IsSqlNull))
    #this_result := True
    Else
    #this_result := False
    Endif
    Return
    Endif
    
    If ((#this_db_BLOB.IsNull) *OrIf (#this_list_BLOB.IsNull))
    If ((#this_db_BLOB.IsNull) *AndIf (#this_list_BLOB.IsNull))
    #this_result := True
    Else
    #this_result := False
    Endif
    Return
    Endif
    Endif
    
    Use Builtin(Stm_File_Open) With_Args(#this_db_BLOB 'Read Binary Lineterminator=NONE') To_Get(#LF_DB_Fileno #LF_DB_rc)
    If (#LF_DB_rc <> OK)
    * Use 'asValue' to ensure there is a value to display
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_DB_rc) ('Opening ' + #this_db_BLOB.asValue( '*SQLNULL' )) )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Return
    Endif
    
    Use Builtin(Stm_File_Open) With_Args(#this_list_BLOB 'Read Binary Lineterminator=NONE') To_Get(#LF_List_Fileno #LF_list_rc)
    If (#LF_list_rc <> OK)
    * Use 'asValue' to ensure there is a value to display
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_list_rc) ('Opening ' + #this_list_BLOB.asValue( '*SQLNULL' )) )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Return
    Endif
    
    If (#LF_Call_count = 1)
    Define Field(#LF_TestFile) Reffld(#BIFA256A)
    #LF_TestFile := *Temp_Dir + 'test.bin'
    
    Use Builtin(OV_File_Service) With_Args(REMOVE_FILE #LF_TestFile)
    Use Builtin(Stm_File_Open) With_Args(#LF_TestFile 'Write Binary Lineterminator=NONE') To_Get(#LF_Test_Fileno #LF_Test_rc)
    If (#LF_Test_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_Test_rc) ('Opening ' + #LF_TestFile) )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Return
    Endif
    Endif
    
    #LF_DB_rc := OV
    #LF_list_rc := OV
    Dountil Cond((#LF_DB_rc = EF) *And (#LF_list_rc = EF))
    
    Use Builtin(STM_FILE_READ) With_Args(#LF_DB_Fileno) To_Get(#LF_DB_Buf #LF_DB_rc)
    If (#LF_DB_rc = ER)
    #Com_Owner.mthAdd_SubMsg( ER ('- Reading ' + #this_db_BLOB.asValue( '*SQLNULL' )) ('') )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Leave
    Endif
    
    Use Builtin(Stm_File_Read) With_Args(#LF_List_Fileno) To_Get(#LF_List_Buf #LF_list_rc)
    If (#LF_list_rc = ER)
    #Com_Owner.mthAdd_SubMsg( ER ('- Reading ' + #this_list_BLOB.asValue( '*SQLNULL' )) ('') )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Leave
    Endif
    
    If (#LF_DB_Buf <> #LF_List_Buf)
    * This is not an error condition. Its up to the caller to know if thats the case or not
    #this_result := False
    Leave
    Endif
    
    If ((#LF_Call_count = 1) *And (#LF_list_rc <> EF))
    Use Builtin(Stm_File_Write) With_Args(#LF_Test_Fileno #LF_List_Buf) To_Get(#LF_Test_rc)
    If (#LF_Test_rc = ER)
    #Com_Owner.mthAdd_SubMsg( ER ('- Writing ' + #LF_TestFile) ('') )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Leave
    Endif
    Endif
    Enduntil
    
    Use Builtin(Stm_File_Close) With_Args(#LF_DB_Fileno) To_Get(#LF_DB_rc)
    If (#LF_DB_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_DB_rc) ('Closing ' + #this_db_BLOB) )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Return
    Endif
    
    Use Builtin(Stm_File_Close) With_Args(#LF_List_Fileno) To_Get(#LF_list_rc)
    If (#LF_list_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #LF_list_rc) ('Closing ' + #this_list_BLOB) )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Return
    Endif
    
    If (#LF_Call_count = 1)
    Use Builtin(Stm_File_Close) With_Args(#LF_Test_Fileno) To_Get(#LF_Test_rc)
    If (#LF_Test_rc = ER)
    #Com_Owner.mthAdd_SubMsg( ER ('- Closing ' + #LF_TestFile) ('') )
    #this_rc := ER
    #this_result := False
    #Com_owner.mthIssue_Runtime_Message( #this_rc )
    Return
    Endif
    Endif
    Endroutine
