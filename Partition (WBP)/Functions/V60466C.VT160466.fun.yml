Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING)
    
    * Existing data.
    Define Field(#LF_Existing_Data_Count) Reffld(#Std_Count)
    Def_List Name(#w_lExistingData) Fields(#BIFNC078A #BIFP0700A #BIFA100A #BIFCLOBA) Counter(#LF_Existing_Data_Count) Type(*WORKING)
    
    Define Field(#LF_Number_Of_Test_Record) Reffld(#Std_Count)
    Define Field(#LF_Number_Of_Sqlnull_Record) Reffld(#Std_Count)
    Define Field(#LF_IsSqlnull) Type(*BOOLEAN)
    Define Field(#LF_Detail_Message) Type(*CHAR) Length(30)
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_i) Reffld(#Std_Count)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    #LF_Number_Of_Test_Record := 10
    #LF_Number_Of_Sqlnull_Record := 3
    
    #Com_Owner.mthAdd_SubMsg( OK ('Key Data ' + *Quote + #VTF_KEY1 + *Quote) '' )
    #Com_Owner.mthDelete( #VTF_KEY1 #LF_rc )
    If (#LF_rc <> ER)
    #Com_Owner.mthInsert( #VTF_KEY1 #LF_Number_Of_Test_Record #LF_Number_Of_Sqlnull_Record #LF_rc )
    Endif
    
    If (#LF_rc <> ER)
    #Com_Owner.mthUpdate( #VTF_KEY1 #LF_rc )
    Endif
    
    If (#LF_rc <> ER)
    #Com_Owner.mthFetch( #VTF_KEY1 #LF_rc )
    Endif
    
    #Com_Owner.mthAdd_Msg( OK *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    Mthroutine Name(mthDelete)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Delete') '' )
    
    Clr_List Named(#w_lExistingData)
    Select Fields(#BIFNC078A #BIFP0700A) From_File(VTL160466C) With_Key(#this_key) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lExistingData)
    Endselect
    
    If ((#this_rc <> ER) *And (#this_rc <> VA))
    #Com_Owner.mthAdd_SubMsg( OK ('- Found ' + #LF_Existing_Data_Count.AsString + ' record(s)') '' )
    If (#LF_Existing_Data_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Existing_Data_Count)
    Get_Entry Number(#LF_i) From_List(#w_lExistingData)
    
    Delete From_File(VTL160466C) With_Key(#BIFNC078A #BIFP0700A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If ((#this_rc = ER) *Or (#this_rc = VE))
    Leave
    Endif
    End_Loop
    Endif
    Endif
    
    If ((#this_rc <> ER) *And (#this_rc <> VA))
    #this_rc := OK
    If (#LF_Existing_Data_Count > 0)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + *Quote + #this_rc + *Quote) '' )
    #this_rc := ER
    Endif
    Endroutine
    
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*INPUT) Class(#Std_Count) Name(#this_number_of_test_record)
    Define_Map For(*INPUT) Class(#Std_Count) Name(#this_number_of_sqlnull_record)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_number_of_sqlnull_record > #this_number_of_test_record)
    #this_number_of_sqlnull_record := #this_number_of_test_record
    Endif
    
    If (#this_number_of_test_record > 0)
    #Com_Owner.mthAdd_SubMsg( OK ('Insert') '' )
    
    Clr_List Named(#w_lExistingData)
    
    #BIFNC078A := #this_key
    #BIFP0700A := 0
    #BIFA100A := *JOBNBR + ' / ' + *JOBNAME
    #BIFA100B := *User
    #BIFCLOBA := *SYS_DIR_SOURCE + 'x_funstr.h'
    
    Dowhile Cond(#BIFP0700A < #this_number_of_test_record)
    If (#BIFP0700A >= (#this_number_of_test_record - #this_number_of_sqlnull_record))
    #BIFCLOBA := *Sqlnull
    Endif
    
    #BIFDT26C := #BIFDT26C.Now
    Insert Fields(#BIFNC078A #BIFP0700A #BIFA100A #BIFA100B #BIFDT26C #BIFCLOBA) To_File(VTL160466C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If ((#this_rc = ER) *Or (#this_rc = VE))
    Leave
    Else
    Add_Entry To_List(#w_lExistingData)
    #BIFP0700A += 1
    Endif
    Endwhile
    
    If ((#this_rc <> ER) *And (#this_rc <> VA))
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') (#BIFP0700A.AsString + ' record(s)') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + *Quote + #this_rc + *Quote) ('On record ' + #BIFP0700A.AsString) )
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    Mthroutine Name(mthUpdate)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#LF_Existing_Data_Count > 0)
    #Com_Owner.mthAdd_SubMsg( OK ('Update') '' )
    
    Begin_Loop Using(#LF_i) To(#LF_Existing_Data_Count)
    Get_Entry Number(#LF_i) From_List(#w_lExistingData)
    
    If (#BIFCLOBA.IsSqlNull)
    #BIFCLOBA := *SYS_DIR_SOURCE + 'x_funstr.h'
    #BIFA100A += ' (Set to a valid Clob)'
    Else
    #BIFCLOBA := *Sqlnull
    #BIFA100A += ' (Set Clob to *Sqlnull)'
    Endif
    
    #BIFDT26C := #BIFDT26C.Now
    Update Fields(#BIFA100A #BIFDT26C #BIFCLOBA) In_File(VTL160466C) With_Key(#BIFNC078A #BIFP0700A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If ((#this_rc = ER) *Or (#this_rc = VE))
    Leave
    Else
    Upd_Entry In_List(#w_lExistingData)
    Endif
    End_Loop
    
    If ((#this_rc <> ER) *And (#this_rc <> VA))
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') (#LF_Existing_Data_Count.AsString + ' record(s)') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + *Quote + #this_rc + *Quote) ('On record ' + #BIFP0700A.AsString) )
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    Mthroutine Name(mthFetch)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#LF_Existing_Data_Count > 0)
    #Com_Owner.mthAdd_SubMsg( OK ('Fetch and verify Clob value status') '' )
    
    #LF_Detail_Message := *Default
    Begin_Loop Using(#LF_i) To(#LF_Existing_Data_Count)
    Get_Entry Number(#LF_i) From_List(#w_lExistingData)
    
    If (#BIFCLOBA.IsSqlNull)
    #LF_IsSqlnull := True
    Else
    #LF_IsSqlnull := False
    Endif
    
    Fetch Fields(#BIFCLOBA) From_File(VTL160466C) With_Key(#BIFNC078A #BIFP0700A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Detail_Message := ' Fetch error'
    Leave
    Else
    If (((#BIFCLOBA.IsSqlnull) *And (#LF_IsSqlnull = False)) *Or ((#BIFCLOBA.IsNotSqlNull) *And (#LF_IsSqlnull = True)))
    #LF_Detail_Message := ' Incorrect Sqlnull value'
    Leave
    Endif
    Endif
    End_Loop
    
    If ((#this_rc <> ER) *And (#this_rc <> VA))
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') (#LF_Existing_Data_Count.AsString + ' record(s)') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + *Quote + #this_rc + *Quote) ('On record ' + #BIFP0700A.AsString + #LF_Detail_Message) )
    #this_rc := ER
    Endif
    Endif
    Endroutine
