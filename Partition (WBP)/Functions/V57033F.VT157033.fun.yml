Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    *
    * Generic Select using Numerics With_key column types using Logical Views
    *
    * That is:
    * SIGNED, DECIMAL, INTEGER 1, 2, 4, 8
    * BLOB also added but not used. Its only there to force use of SQL on IBM i.
    * Tests are executed from only a Function but NOT a Reusable Part.
    *
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    * List Of Test data.
    Define Field(#LF_Test_Data) Reffld(#BIFN0702A)
    Define Field(#LF_Test_Data_Count) Reffld(#Std_Count)
    Define Field(#LF_Test_Key_Count) Reffld(#Std_Count)
    Def_List Name(#wLTestData) Fields(#LF_Test_Data) Counter(#LF_Test_Data_Count) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#wLTestKey) Fields(#LF_Test_Data #LF_TraceData) Counter(#LF_Test_Key_Count) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_j) Reffld(#Std_Count)
    Define Field(#LF_Total_Errors) Reffld(#Std_Count)
    Define Field(#LF_Total_Warnings) Reffld(#Std_Count)
    Define Field(#LF_Execution_Type) Reffld(#Std_Alpha)
    
    Define Field(#LF_Test_Data_SIGNED) Reffld(#BIFN0702A)
    Define Field(#LF_Test_Data_DECIMAL) Reffld(#BIFP1504A)
    Define Field(#LF_Test_Data_INT1) Reffld(#BIFINT1A)
    Define Field(#LF_Test_Data_INT2) Reffld(#BIFINT2A)
    Define Field(#LF_Test_Data_INT4) Reffld(#BIFINT4A)
    Define Field(#LF_Test_Data_INT8) Reffld(#BIFINT8A)
    Define Field(#LF_Operation_Name) Reffld(#BIFMSG1)
    
    * Counter for the current Function's I/O queries.
    Define Field(#LF_Func_L157033FI1) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FI2) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FI4) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FI8) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FP) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FPD) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FN) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033FND) Reffld(#Std_Count)
    
    Group_By Name(#LF_Func_Counters) Fields(#LF_Func_L157033FI1 #LF_Func_L157033FI2 #LF_Func_L157033FI4 #LF_Func_L157033FI8 #LF_Func_L157033FP #LF_Func_L157033FPD #LF_Func_L157033FN #LF_Func_L157033FND #LF_Total_Errors)
    
    Define Field(#LF_Test_Result_L157033FI1) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FI2) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FI4) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FI8) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FP) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FPD) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FN) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_L157033FND) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_Generic_Signed_Decimals_Count) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_Exact_Signed_Decimals_Count) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_Generic_Signed_Count) Reffld(#Std_Count)
    Define Field(#LF_Test_Result_Exact_Signed_Count) Reffld(#Std_Count)
    
    * Signed_Decimals
    Def_List Name(#wLTestResultGenericSigned_Decimals) Fields(#LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FN #LF_Test_Result_L157033FND) Counter(#LF_Test_Result_Generic_Signed_Decimals_Count) Type(*WORKING) Entrys(*MAX)
    
    Def_List Name(#wLTestResultExactSigned_Decimals) Fields(#LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FN #LF_Test_Result_L157033FND) Counter(#LF_Test_Result_Exact_Signed_Decimals_Count) Type(*WORKING) Entrys(*MAX)
    
    Def_List Name(#wLTestResultGenericSigned) Fields(#LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FN #LF_Test_Result_L157033FND) Counter(#LF_Test_Result_Generic_Signed_Count) Type(*WORKING) Entrys(*MAX)
    
    Def_List Name(#wLTestResultExactSigned) Fields(#LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FN #LF_Test_Result_L157033FND) Counter(#LF_Test_Result_Exact_Signed_Count) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_TraceData) Reffld(#BIFB001E) Default(False)
    Define Field(#LF_View_Type) Reffld(#BIFMSG1)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    * SETUP THE TEST DATA.
    Execute Subroutine(AddTestData)
    
    * DELETE / INSERT TEST DATA.
    #LF_Execution_Type := #VTF_KEY1
    #Com_Owner.mthDoDelete( #LF_rc )
    #Com_Owner.mthDoInsert( #LF_rc )
    
    * SEARCH TEST.
    #Com_Owner.mthDoSearch( #LF_rc )
    
    #Com_Owner.mthAdd_Msg( OK *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    *
    * Add Test Data.
    *
    Subroutine Name(AddTestData)
    Define Field(#LF_String) Reffld(#BIFC256A)
    
    Clr_List Named(#wLTestData)
    * Generate numbers from 100.00 to 119.90 in 0.06 increments
    Begin_Loop Using(#LF_i) From(100) To(119)
    Begin_Loop Using(#LF_j) From(0) To(90) Step(6)
    #LF_String := #LF_i.asString + '.' + #LF_j.asString
    #LF_Test_Data := #LF_String.asNumber
    Add_Entry To_List(#wLTestData)
    End_Loop
    End_Loop
    
    * Generate numbers from -100.00 to -119.90 in 0.06 increments
    Begin_Loop Using(#LF_i) From(-100) To(-119) Step(-1)
    Begin_Loop Using(#LF_j) From(0) To(90) Step(6)
    #LF_String := #LF_i.asString + '.' + #LF_j.asString
    #LF_Test_Data := #LF_String.asNumber
    Add_Entry To_List(#wLTestData)
    End_Loop
    End_Loop
    
    * Keys with trailing zeroes may return multiple rows when using Generic(*YES)
    Clr_List Named(#wLTestKey)
    Clr_List Named(#wLTestResultExactSigned)
    Clr_List Named(#wLTestResultExactSigned_Decimals)
    Clr_List Named(#wLTestResultGenericSigned)
    Clr_List Named(#wLTestResultGenericSigned_Decimals)
    
    * *****************************************************************************
    * Search <1>
    * *****************************************************************************
    #LF_Test_Data := 100
    #LF_TraceData := False
    Add_Entry To_List(#wLTestKey)
    * Generic Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 320
    Add_Entry To_List(#wLTestResultGenericSigned_Decimals)
    * Exact Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned_Decimals)
    * Generic Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 320
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 320
    Add_Entry To_List(#wLTestResultGenericSigned)
    * Exact Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    
    Add_Entry To_List(#wLTestResultExactSigned)
    
    * *****************************************************************************
    * Search <2>
    * *****************************************************************************
    #LF_Test_Data := 110
    #LF_TraceData := False
    Add_Entry To_List(#wLTestKey)
    * Generic Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 160
    Add_Entry To_List(#wLTestResultGenericSigned_Decimals)
    * Exact Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned_Decimals)
    * Generic Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 160
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 160
    Add_Entry To_List(#wLTestResultGenericSigned)
    * Exact Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned)
    
    * *****************************************************************************
    * Search <3>
    * *****************************************************************************
    #LF_Test_Data := 111
    #LF_TraceData := False
    Add_Entry To_List(#wLTestKey)
    * Generic Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 16
    Add_Entry To_List(#wLTestResultGenericSigned_Decimals)
    * Exact Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned_Decimals)
    * Generic Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 16
    Add_Entry To_List(#wLTestResultGenericSigned)
    * Exact Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned)
    
    * *****************************************************************************
    * Search <4>
    * *****************************************************************************
    #LF_Test_Data := 111.1
    #LF_TraceData := False
    Add_Entry To_List(#wLTestKey)
    * Generic Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 2
    Add_Entry To_List(#wLTestResultGenericSigned_Decimals)
    * Exact Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 0
    Add_Entry To_List(#wLTestResultExactSigned_Decimals)
    * Generic Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 16
    Add_Entry To_List(#wLTestResultGenericSigned)
    * Exact Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned)
    
    * *****************************************************************************
    * Search <5>
    * *****************************************************************************
    #LF_Test_Data := -100
    #LF_TraceData := True
    Add_Entry To_List(#wLTestKey)
    * Generic Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 320
    Add_Entry To_List(#wLTestResultGenericSigned_Decimals)
    * Exact Signed_Decimals Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP #LF_Test_Result_L157033FN := 0
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    Add_Entry To_List(#wLTestResultExactSigned_Decimals)
    * Generic Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 320
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 320
    Add_Entry To_List(#wLTestResultGenericSigned)
    * Exact Signed Results
    #LF_Test_Result_L157033FI1 #LF_Test_Result_L157033FN := 16
    #LF_Test_Result_L157033FI2 #LF_Test_Result_L157033FI4 #LF_Test_Result_L157033FI8 #LF_Test_Result_L157033FP := 0
    
    #LF_Test_Result_L157033FPD #LF_Test_Result_L157033FND := 1
    
    Add_Entry To_List(#wLTestResultExactSigned)
    Endroutine
    
    *
    * Delete Data.
    *
    Mthroutine Name(mthDoDelete)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #LF_i := 0
    Dowhile Cond(#this_rc = OK)
    Fetch Fields(#F157033K1) From_File(VTL157033F) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #LF_i += 1
    Delete From_File(VTL157033F) With_Key(#F157033K1) Io_Error(*NEXT) Val_Error(*NEXT)
    Endif
    Endwhile
    
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Delete Data' (#LF_i.AsString + ' set of key records deleted') )
    Endroutine
    
    *
    * Insert Data.
    *
    Mthroutine Name(mthDoInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_iMod) Reffld(#STD_COUNT)
    
    #F157033K1 := #VTF_KEY1 + #VTF_KEY2 + #VTF_KEY3
    #F157033K2 := 0
    #BIFBLOBA := *SQLNULL
    
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#LF_Test_Data_Count)
    Get_Entry Number(#LF_i) From_List(#wLTestData)
    
    #F157033K2 += 1
    #BIFINT1A #BIFINT2A #BIFINT4A #BIFINT8A #BIFP1500A #BIFP1504A #BIFN0700A #BIFN0702A := #LF_Test_Data
    
    Insert Fields(*ALL) To_File(VTL157033F) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc *NE OK)
    #this_rc := ER
    Leave
    Endif
    End_Loop
    Endif
    
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Insert Data' (#F157033K2.AsString + ' / ' + #LF_Test_Data_Count.AsString + ' records inserted') )
    Endroutine
    
    *
    * Search.
    *
    Mthroutine Name(mthDoSearch)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#LF_Test_Key_Count)
    Get_Entry Number(#LF_i) From_List(#wLTestKey)
    * Note that #LF_TraceData has just been set globally
    
    #Com_Owner.mthAdd_SubMsg( #this_rc ('<' + #LF_i.AsString + '> Search Test: ' + *Quote + #LF_Test_Data.asString + *Quote) '' )
    
    #Com_Owner.mthSearch_By_Signed_Decimals( #LF_Test_Data #this_rc )
    #Com_Owner.mthSearch_By_Signed( #LF_Test_Data #this_rc )
    * #Com_Owner.mthSearch_By_Decimal_Decimals( #LF_Test_Data #this_rc )
    * #Com_Owner.mthSearch_By_Decimal( #LF_Test_Data #this_rc )
    * #Com_Owner.mthSearch_By_Integer1( #LF_Test_Data #this_rc )
    * #Com_Owner.mthSearch_By_Integer2( #LF_Test_Data #this_rc )
    * #Com_Owner.mthSearch_By_Integer4( #LF_Test_Data #this_rc )
    * #Com_Owner.mthSearch_By_Integer8( #LF_Test_Data #this_rc )
    
    If (#this_rc *NE OK)
    Leave
    Endif
    End_Loop
    Endif
    Endroutine
    
    *
    * mthDoTestResult
    *
    * Requires results (#LF_Test_Result_*) to have been appropriately populated from the Test Result lists
    * And then the actual SELECT results in the #LF_Func_* set of fields
    *
    Mthroutine Name(mthDoTestResult)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#LF_Total_Errors > 0)
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Total errors: ' + #LF_Total_Errors.asString) )
    Else
    If ((#LF_Test_Result_L157033FI1 <> #LF_Func_L157033FI1) *OrIf (#LF_Test_Result_L157033FI2 <> #LF_Func_L157033FI2) *OrIf (#LF_Test_Result_L157033FI4 <> #LF_Func_L157033FI4) *OrIf (#LF_Test_Result_L157033FI8 <> #LF_Func_L157033FI8) *OrIf (#LF_Test_Result_L157033FP <> #LF_Func_L157033FP) *OrIf (#LF_Test_Result_L157033FPD <> #LF_Func_L157033FPD) *OrIf (#LF_Test_Result_L157033FN <> #LF_Func_L157033FN) *OrIf (#LF_Test_Result_L157033FND <> #LF_Func_L157033FND))
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Go through log above to see which result is mis-matched') )
    Endif
    Endif
    Endroutine
    
    *
    * Search By SIGNED with Decimals.
    *
    Mthroutine Name(mthSearch_By_Signed_Decimals)
    Define_Map For(*INPUT) Class(#BIFN0702A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthFunc_Search_Generic_Signed_Decimals( 'SELECT GENERIC Key: SIGNED(7,2)' #this_test_value #this_rc )
    #Com_Owner.mthFunc_Search_Exact_Signed_Decimals( 'SELECT EXACT Key: SIGNED(7,2)' #this_test_value #this_rc )
    
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Generic_Signed_Decimals)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#BIFN0702A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    If (#LF_i > #LF_Test_Result_Generic_Signed_Decimals_Count)
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Test result ' + #LF_i.asString + ' missing from Test Result List') )
    Return
    Else
    Get_Entry Number(#LF_i) From_List(#wLTestResultGenericSigned_Decimals)
    Endif
    
    * SIGNED(7,2).
    #LF_View_Type := ' View Key: SIGNED(7,2)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFN0702A) From_File(L157033FND) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FND += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFN0702A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FND. Rows = ' + #LF_Func_L157033FND.asString + ' Expected = ' + #LF_Test_Result_L157033FND.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * DECIMALS(15,4).
    #LF_View_Type := ' View Key: DECIMALS(15,4)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFP1504A) From_File(L157033FPD) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FPD += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFP1504A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FPD. Rows = ' + #LF_Func_L157033FPD.asString + ' Expected = ' + #LF_Test_Result_L157033FPD.asString) )
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    
    #Com_Owner.mthDoTestResult( #this_operation #this_rc )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Exact_Signed_Decimals)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#BIFN0702A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    If (#LF_i > #LF_Test_Result_Exact_Signed_Decimals_Count)
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Test result ' + #LF_i.asString + ' missing from Test Result List') )
    Return
    Else
    Get_Entry Number(#LF_i) From_List(#wLTestResultExactSigned_Decimals)
    Endif
    
    * SIGNED(7,2).
    #LF_View_Type := ' View Key: SIGNED(7,2)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFN0702A) From_File(L157033FND) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FND += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFN0702A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FND. Rows = ' + #LF_Func_L157033FND.asString + ' Expected = ' + #LF_Test_Result_L157033FND.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * DECIMALS(15,4).
    #LF_View_Type := ' View Key: DECIMALS(15,4)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFP1504A) From_File(L157033FPD) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FPD += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFP1504A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FPD. Rows = ' + #LF_Func_L157033FPD.asString + ' Expected = ' + #LF_Test_Result_L157033FPD.asString) )
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    
    #Com_Owner.mthDoTestResult( #this_operation #this_rc )
    
    Endif
    Endroutine
    
    *
    * Search By SIGNED without Decimals.
    *
    Mthroutine Name(mthSearch_By_Signed)
    Define_Map For(*INPUT) Class(#BIFN0700A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthFunc_Search_Generic_Signed( 'SELECT GENERIC Key: SIGNED(7,0)' #this_test_value #this_rc )
    #Com_Owner.mthFunc_Search_Exact_Signed( 'SELECT EXACT Key: SIGNED(7,0)' #this_test_value #this_rc )
    
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Generic_Signed)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#BIFN0700A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    If (#LF_i > #LF_Test_Result_Generic_Signed_Count)
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Test result ' + #LF_i.asString + ' missing from Test Result List') )
    Return
    Else
    Get_Entry Number(#LF_i) From_List(#wLTestResultGenericSigned)
    Endif
    
    * SIGNED(7,2).
    #LF_View_Type := ' View Key: SIGNED(7,2)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFN0702A) From_File(L157033FND) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FND += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFN0702A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FND. Rows = ' + #LF_Func_L157033FND.asString + ' Expected = ' + #LF_Test_Result_L157033FND.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * SIGNED(7,0).
    #LF_View_Type := ' View Key: SIGNED(7,0)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFN0700A) From_File(L157033FN) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FN += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFN0700A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FN. Rows = ' + #LF_Func_L157033FN.asString + ' Expected = ' + #LF_Test_Result_L157033FN.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * DECIMALS(15,4).
    #LF_View_Type := ' View Key: DECIMALS(15,4)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFP1504A) From_File(L157033FPD) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FPD += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFP1504A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FPD. Rows = ' + #LF_Func_L157033FPD.asString + ' Expected = ' + #LF_Test_Result_L157033FPD.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * INTEGER 1.
    #LF_View_Type := ' View Key: INTEGER 1'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    
    #LF_Test_Data_INT1 := #this_test_value
    Select Fields(#BIFINT1A) From_File(L157033FI1) With_Key(#LF_Test_Data_INT1) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FI1 += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFINT1A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FI1. Rows = ' + #LF_Func_L157033FI1.asString + ' Expected = ' + #LF_Test_Result_L157033FI1.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    #Com_Owner.mthDoTestResult( #this_operation #this_rc )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Exact_Signed)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#BIFN0700A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    If (#LF_i > #LF_Test_Result_Exact_Signed_Count)
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Test result ' + #LF_i.asString + ' missing from Test Result List') )
    Return
    Else
    Get_Entry Number(#LF_i) From_List(#wLTestResultExactSigned)
    Endif
    
    * SIGNED(7,2).
    #LF_View_Type := ' View Key: SIGNED(7,2)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFN0702A) From_File(L157033FND) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FND += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFN0702A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FND. Rows = ' + #LF_Func_L157033FND.asString + ' Expected = ' + #LF_Test_Result_L157033FND.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * SIGNED(7,0).
    #LF_View_Type := ' View Key: SIGNED(7,0)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFN0700A) From_File(L157033FN) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FN += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFN0700A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FN. Rows = ' + #LF_Func_L157033FN.asString + ' Expected = ' + #LF_Test_Result_L157033FN.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * DECIMALS(15,4).
    #LF_View_Type := ' View Key: DECIMALS(15,4)'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    Select Fields(#BIFP1504A) From_File(L157033FPD) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FPD += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFP1504A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FPD. Rows = ' + #LF_Func_L157033FPD.asString + ' Expected = ' + #LF_Test_Result_L157033FPD.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * INTEGER 1.
    #LF_View_Type := ' View Key: INTEGER 1'
    #Com_Owner.mthAdd_Msg( #this_rc (#LF_View_Type + ' ' + #this_operation) ('Key Value:' + #this_test_value.asString) )
    
    #LF_Test_Data_INT1 := #this_test_value
    Select Fields(#BIFINT1A) From_File(L157033FI1) With_Key(#LF_Test_Data_INT1) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033FI1 += 1
    #Com_Owner.mthAdd_TraceMsg( #this_rc '' ('Result: ' + #BIFINT1A.asString) )
    Endselect
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('On Logical View L157033FI1. Rows = ' + #LF_Func_L157033FI1.asString + ' Expected = ' + #LF_Test_Result_L157033FI1.asString) )
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    Else
    #this_rc := OK
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    #Com_Owner.mthDoTestResult( #this_operation #this_rc )
    Endif
    Endroutine
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_TraceMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    If (#LF_TraceData)
    #Com_Owner.mthAdd_SubMsg( #this_msg_code #this_msg1 #this_msg2 )
    Endif
    Endroutine
