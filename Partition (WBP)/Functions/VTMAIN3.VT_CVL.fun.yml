Function:
  Enabled For RDMLX:  Yes

  Source: |
    * Has the CCS Id being set up?
    * #LF_VTMain1_Verify_Test_CCSId := '151...'
    * #LF_VTMain1_Verify_Test_Environments := 'Testing Environemts ???'
    
    Function Options(*DIRECT)
    
    * Required preset variables.
    Define Field(#LF_VTMain1_Verify_Test_CCSId) Type(*CHAR) Length(7) Default(*Blanks)
    Define Field(#LF_VTMain1_Verify_Test_Environments) Reffld(#VTF_TDESC) Default(*Blanks)
    
    * Local variables.
    Define Field(#LF_VTMain1_Local_Platform) Reffld(#VTF_PLATL)
    Define Field(#LF_VTMain1_Remote_Platform) Reffld(#VTF_PLATR)
    Define Field(#LF_VTMain1_Supser_Server_Name) Type(*CHAR) Length(20)
    Define Field(#LF_VTMain1_Supser_Server_Token) Type(*CHAR) Length(10)
    Define Field(#LF_VTMain1_Super_Server_Name_Number) Reffld(#VTF_LU_NO)
    Define Field(#LF_VTMain1_Super_Server_Error_Count) Reffld(#VTF_LU_EC)
    Define Field(#LF_VTMain1_Super_Server_Total_Error_Count) Reffld(#VTF_LU_EC)
    Define Field(#LF_VTMain1_Is_Connected) Type(*CHAR) Length(1)
    Define Field(#LF_VTMain1_Is_Auto_Connect) Type(*CHAR) Length(1)
    
    Define Field(#LF_VTMain1_rc) Type(*CHAR) Length(2)
    Define Field(#LF_VTMain1_rrn) Type(*DEC) Length(7) Decimals(0)
    
    * Remote server platform details.
    Def_List Name(#wlRemoteSystem) Fields(#VTF_SSCP #VTF_SSCLT #VTF_SSCDT #VTF_SSCET #VTF_SSCEP #VTF_SSCIT #VTF_SSCII #VTF_SSCUT #VTF_SSCID) Type(*WORKING) Entrys(1)
    
    *
    * Template begin.
    *
    
    * Log the test case.
    #Com_Owner.mthLogTestCase( #LF_VTMain1_Verify_Test_CCSId (*Function + ' / ' + *Process) #LF_VTMain1_Verify_Test_Environments )
    
    If ((#LF_VTMain1_Verify_Test_CCSId = *Blanks) *Or (#LF_VTMain1_Verify_Test_CCSId = '000000'))
    * CCS Id has not been specififed => ERROR.
    #Com_Owner.mthLogEvent( ('*** Invalid Test Case *** ( ' + *Function + ' / ' + *Process + ' )') )
    Use Builtin(NOTIFY_VERIFIER) With_Args(Failed)
    Else
    * Retrieve the local platform type.
    If Cond('(*CPUTYPE *eq WIN95) *Or (*CPUTYPE *eq WINNT)')
    #LF_VTMain1_Local_Platform := W
    Else
    If Cond('*CPUTYPE *eq AS400')
    #LF_VTMain1_Local_Platform := I
    Else
    #LF_VTMain1_Local_Platform := U
    Endif
    Endif
    
    #LF_VTMain1_Remote_Platform := *Blanks
    
    * Execute the test case on the local plastform.
    #Com_Owner.mthExecute( #LF_VTMain1_Local_Platform #LF_VTMain1_Local_Platform #LF_VTMain1_Remote_Platform *Blanks *Blanks *Sqlnull *Blanks *Blanks *Blanks *Blanks *Blanks *Blanks )
    
    * Perform SuperServer test by connecting/disconnecting one SuperServer at a time.
    SSV:
    #Com_Owner.mthGetSuperServer( #LF_VTMain1_Is_Connected #LF_VTMain1_Is_Auto_Connect #LF_VTMain1_Supser_Server_Name #LF_VTMain1_Supser_Server_Token #LF_VTMain1_Super_Server_Name_Number #LF_VTMain1_Super_Server_Error_Count )
    
    If (#LF_VTMain1_Is_Connected = Y)
    * Get the remote system platform type.
    Use Builtin(Call_Server_Function) With_Args(#LF_VTMain1_Supser_Server_Token VTSSRF3 Y Y #wlRemoteSystem) To_Get(#LF_VTMain1_rc)
    
    Get_Entry Number(1) From_List(#wlRemoteSystem) Ret_Status(#LF_VTMain1_rc)
    If (#LF_VTMain1_rc = OK)
    * The remote system is up and running.
    
    If Cond('(#VTF_SSCP *eq WIN95) *Or (#VTF_SSCP *eq WINNT)')
    #LF_VTMain1_Remote_Platform := W
    Else
    If Cond('#VTF_SSCP *eq AS400')
    #LF_VTMain1_Remote_Platform := I
    Else
    #LF_VTMain1_Remote_Platform := U
    Endif
    Endif
    
    * Execute the test case on SuperServer - SuperServer I/O queries (Q).
    #Com_Owner.mthExecute( Q #LF_VTMain1_Local_Platform #LF_VTMain1_Remote_Platform #LF_VTMain1_Supser_Server_Name #LF_VTMain1_Supser_Server_Token #VTF_SSCDT #VTF_SSCET #VTF_SSCEP #VTF_SSCIT #VTF_SSCII #VTF_SSCUT #VTF_SSCID )
    
    * Execute the test case on SuperServer - SuperServer Function Call (F).
    #Com_Owner.mthExecute( F #LF_VTMain1_Local_Platform #LF_VTMain1_Remote_Platform #LF_VTMain1_Supser_Server_Name #LF_VTMain1_Supser_Server_Token *Sqlnull *Blanks *Blanks *Blanks *Blanks *Blanks *Blanks )
    
    * Disconnect the SuperServer connection if not an 'Auto Connect' execution type.
    If (#LF_VTMain1_Is_Auto_Connect = N)
    
    Use Builtin(Disconnect_File) With_Args(* #LF_VTMain1_Supser_Server_Token)
    Use Builtin(Disconnect_Server) With_Args(#LF_VTMain1_Supser_Server_Token) To_Get(#LF_VTMain1_rc)
    
    * E - Evaluation (if any) after the SuperServer disconnection.
    #Com_Owner.mthExecute( E #LF_VTMain1_Local_Platform #LF_VTMain1_Remote_Platform *Blanks *Blanks *Sqlnull *Blanks *Blanks *Blanks *Blanks *Blanks *Blanks )
    
    Goto Label(SSV)
    Endif
    Endif
    Else
    * Report the SuperServer connection error.
    If (#LF_VTMain1_Super_Server_Error_Count > 0)
    #LF_VTMain1_Super_Server_Total_Error_Count += 1
    
    #Com_Owner.mthLogEvent( '' )
    #Com_Owner.mthLogEvent( ('*** Unable to connect to <LU Name> ... ' + *Quote + #LF_VTMain1_Supser_Server_Name + *Quote) )
    #Com_Owner.mthLogEvent( '' )
    
    Goto Label(SSV)
    Endif
    Endif
    
    If (#LF_VTMain1_Super_Server_Total_Error_Count > 0)
    #Com_Owner.mthLogEvent( ('*** ' + #LF_VTMain1_Super_Server_Total_Error_Count.AsString + ' SuperServer Connection error(s). Look for <LU Name> for details') )
    Use Builtin(NOTIFY_VERIFIER) With_Args(Failed)
    Endif
    
    #Com_Owner.mthLogTestCaseEnd( *Blanks )
    Endif
    
    * Template end.
    Return
    
    *
    * GetSuperServer :- Call Function VTSSRV To Retrieve SuperServer Connection.
    *    - #this_ssc: Return Of The SuperServer Connection Flag (Y / N).
    *    - #this_ssc_auto: Return Of The Auto SuperServer Connection Flag (Y / N).
    *    - #this_lu: Return Of The Look Up Name.
    *    - #this_ssc_token: Return Of The SuperServer Connection Token.
    *
    Mthroutine Name(mthGetSuperServer)
    Define_Map For(*OUTPUT) Class(#VTF_SSC) Name(#this_ssc)
    Define_Map For(*OUTPUT) Class(#VTF_SSCF) Name(#this_ssc_auto)
    Define_Map For(*OUTPUT) Class(#VTF_LU) Name(#this_lu)
    Define_Map For(*OUTPUT) Class(#VTF_SSCT) Name(#this_ssc_token)
    Define_Map For(*BOTH) Class(#VTF_LU_NO) Name(#this_lu_number)
    Define_Map For(*BOTH) Class(#VTF_LU_NO) Name(#this_lu_error_count)
    
    #VTF_LU_NO := #this_lu_number
    Exchange Fields(#VTF_SSC #VTF_SSCF #VTF_LU #VTF_SSCT #VTF_LU_NO #VTF_LU_EC)
    Call Process(*DIRECT) Function(VTSSRV)
    
    #this_ssc := #VTF_SSC
    #this_ssc_auto := #VTF_SSCF
    #this_lu := #VTF_LU
    #this_ssc_token := #VTF_SSCT
    #this_lu_number := #VTF_LU_NO
    #this_lu_error_count := #VTF_LU_EC
    Endroutine
    
    *
    * Execute :- Execute a test case.
    *    - #this_exec: Execution Method. iSeries (I), Windows (W), SuperServer I/O queries (Q), SuperServer Function Call (F).
    *    - #this_ss_lu: Super Server Look Up Name.
    *    - #this_ssc_token: Super Server Connection Token.
    *
    Mthroutine Name(mthExecute)
    Define_Map For(*INPUT) Class(#VTF_ENV) Name(#this_exec)
    Define_Map For(*INPUT) Class(#VTF_PLATL) Name(#this_local_platform)
    Define_Map For(*INPUT) Class(#VTF_PLATR) Name(#this_Remote_platform)
    Define_Map For(*INPUT) Class(#VTF_LU) Name(#this_ssv_name)
    Define_Map For(*INPUT) Class(#VTF_SSCT) Name(#this_ssc_token)
    Define_Map For(*INPUT) Class(#VTF_SSCDT) Name(#this_ssc_current_datetime)
    Define_Map For(*INPUT) Class(#VTF_SSCET) Name(#this_ssc_env_type)
    Define_Map For(*INPUT) Class(#VTF_SSCEP) Name(#this_ssc_env_path)
    Define_Map For(*INPUT) Class(#VTF_SSCIT) Name(#this_ssc_internal_database_type)
    Define_Map For(*INPUT) Class(#VTF_SSCII) Name(#this_ssc_internal_database_name)
    Define_Map For(*INPUT) Class(#VTF_SSCUT) Name(#this_ssc_user_database_type)
    Define_Map For(*INPUT) Class(#VTF_SSCID) Name(#this_ssc_user_database_name)
    
    #Com_Owner.mthLogTest( #this_exec #this_local_platform #this_Remote_platform #this_ssv_name #this_ssc_token )
    
    If (#this_ssc_env_type *NE *Blanks)
    #Com_Owner.mthLogExtraDetails( #this_ssc_current_datetime #this_ssc_env_type #this_ssc_env_path #this_ssc_internal_database_type #this_ssc_internal_database_name #this_ssc_user_database_type #this_ssc_user_database_name )
    Endif
    
    #LF_VTMain1_rc := NA
    
    #Com_Owner.mthRun( #this_exec #this_local_platform #this_remote_platform #this_ssv_name #this_ssc_token #LF_VTMain1_rc )
    
    If (#LF_VTMain1_rc *NE NA)
    #Com_Owner.mthLogEvent( ('Completed with <' + #LF_VTMain1_rc + '>.') )
    If (#LF_VTMain1_rc = ER)
    Use Builtin(NOTIFY_VERIFIER) With_Args(Failed)
    Endif
    Endif
    Endroutine
    
    
