Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    *
    * BLOB before Unicode column causes an access violation or data corruption
    *
    * This test is simply executed. If it completes then it passes.
    * Throwing an AV is captured by the test harness.
    *
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    
    Define Field(#LF_Count) Reffld(#STD_COUNT)
    Def_List Name(#l_VTL986925C) Fields(#FFNumero) Counter(#LF_Count) Type(*WORKING)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    *
    * Add your test case here
    * It should be a list of method calls so its easy to read whats being tested.
    
    #Com_owner.mthThrowAV( #VTF_KEY1 #LF_rc )
    
    #Com_Owner.mthAdd_Msg( OK *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthThrowAV)
    Define_Map For(*INPUT) Class(#VTF_KEY1) Name(#this_key1)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    Clr_List Named(#l_VTL986925C)
    Select Fields(*ALL) From_File(VTL986925C) Io_Status(#this_rc) Io_Error(*NEXT)
    Add_Entry To_List(#l_VTL986925C)
    Endselect
    If ((#this_rc <> OK) *AndIf (#this_rc <> EF))
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected return code selecting existing data ' + #this_rc) '' )
    #this_rc := ER
    Return
    Endif
    #this_rc := OK
    
    If (#LF_Count <> 0)
    If ((#LF_Count = 1))
    Get_Entry Number(1)
    Delete From_File(VTL986925C) With_Key(#FFNumero) Io_Status(#this_rc) Io_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected return code deleting row ' + #this_rc) '' )
    #this_rc := ER
    Return
    Endif
    
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected numer of rows, should be 1 ' + #LF_Count.asString) '' )
    #this_rc := ER
    Return
    Endif
    Endif
    
    #FFNUMERO := A
    #RGCIIU := "A"
    Insert Fields(*ALL) To_File(VTL986925C) Io_Status(#this_rc) Io_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected return code inserting data ' + #this_rc) '' )
    #this_rc := ER
    Return
    Endif
    
    #RGCIIU := "B"
    Update Fields(#RGCIIU) In_File(VTL986925C) With_Key(#FFNUMERO) Io_Status(#this_rc) Io_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected return code updating data ' + #this_rc) '' )
    #this_rc := ER
    Return
    Endif
    
    Fetch Fields(*ALL) From_File(VTL986925C) Io_Status(#this_rc) Io_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected return code fetching data ' + #this_rc) '' )
    #this_rc := ER
    Return
    Endif
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Test did not throw AV') ('') )
    Endroutine
